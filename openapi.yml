openapi: '3.0.2'
info:
  title: Berbagi API Documentation
  version: '1.0'
  description: "This OpenAPI documentation contains the guideline for 'Berbagi API Services'"
  contact:
    name : "Berbagi API Support"
    email : "support.berbagi@gmail.com"
servers:
  - url: https://{environment}.api.server.test/v1
    description: "Berbagi REStful API Server"
    variables:
      environment: 
        default: dev
        enum:
          - "prod"
          - "dev"
paths:
### proficiencies
  /proficiencies:
    get:
      tags:
        - "Proficiency"
      summary: "Get list of profiencies data"
      security:
        - JWTAuth: []
      description: "Get all available proficiencies"
      responses:
        '200':
          description: "response while success to get list proficiencies "
          content:
            application/json:
              schema:
                type: object
                properties: {
                  "Message": {
                    type: string
                  },
                  "Status": {
                    type: string
                  },
                  "Data": {
                    type: array,
                    items: {
                      type: object,
                       properties: {
                         "id": {
                           type: number
                         },
                         "name": {
                           type: string
                         }
                       }
                         
                    }
                  }
                }
              examples:
                success: 
                  description: "Example success get list proficiencies"
                  value: {
                    "Message": "Success to get list proficencies",
                    "Status": "Success",
                    "Data": [ 
                      {
                      "id": 1,
                      "name": "education",
                      },
                      {
                      "id": 2,
                      "name": "health",
                      },
                    ]
                  }
                failed:
                  description: "Example list proficiencies not found"
                  value: {
                    "Message": "List proficiencies not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to get list proficiencies "           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to get list proficiencies"
                  value: {
                    "Message": "Failed to get list proficiencies data",
                    "Status": "Failed",
                  }
                unauthorized:
                  description: "Example unauthorized access"
                  value: {
                    "Message": "Unauthorized access",
                    "Status": "Failed",
                  }             

    post:
      tags:
        - "Proficiency"
      summary: "Create new proficiency data"
      security:
        - JWTAuth: []
      description: "Create new proficiency to database"
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/requestProficiency'
            examples:
              education: 
                description: "Example for education proficiency"
                value: {
                  "name" : "education"  
               }
              health: 
                description: "Example for health proficiency"
                value: {
                  "name" : "health"  
                }                    
      responses:
        '200':
          description: "response while success to create new proficiency "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUpdateCreate'
              examples:
                success: 
                  description: "Example success create new proficiency"
                  value: {
                    "Message": "Success to create new proficiency",
                    "Status": "Success",
                    "Data": 
                      {
                      "id": 1,
                      "name": "education",
                      },
                  }
                failed:
                  description: "Example failed create new proficiency"
                  value: {
                    "Message": "New proficiency not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to create new proficiency"           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to create new proficiency"
                  value: {
                    "Message": "Failed to create new proficiency",
                    "Status": "Failed",
                  }
                unauthorized:
                  description: "Example unauthorized access"
                  value: {
                    "Message": "Unauthorized access",
                    "Status": "Failed",
                  } 

  /proficiencies/{id}:
    put:
      tags:
        - "Proficiency"
      summary: "Update proficiency data"
      security:
        - JWTAuth: []
      description: "Update proficiency data in database"
      parameters:
        - $ref: '#/components/parameters/proficiencyId' 
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/requestProficiency'
            examples:
              education: 
                description: "Example for education proficiency"
                value: {
                  "name" : "education"  
                }
              health: 
                description: "Example for health proficiency"
                value: {
                  "name" : "health"  
                }              
      responses:
        '200':
          description: "response while success to update proficiency data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUpdateCreate'
              examples:
                success: 
                  description: "Example success to update proficiency data"
                  value: {
                    "Message": "Success to update proficiency",
                    "Status": "Success",
                    "Data": 
                      {
                      "id": 1,
                      "name": "education",
                      },
                  }
                failed:
                  description: "Example failed to update proficiency"
                  value: {
                    "Message": "Proficiency id not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to update proficiency data"           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to update proficiency data"
                  value: {
                    "Message": "Failed to update proficiency",
                    "Status": "Failed",
                  }
                unauthorized:
                  description: "Example unauthorized access"
                  value: {
                    "Message": "Unauthorized access",
                    "Status": "Failed",
                  }
                invalid proficiencyId:
                  description: "Example Invalid proficiency id"
                  value: {
                    "Message": "Invalid proficiency id",
                    "Status": "Failed",
                  }
    delete:
      tags:
        - "Proficiency"
      summary: "Delete proficiency data"
      security:
        - JWTAuth: []
      description: "Delete proficiency data in database"
      parameters:
        - $ref: '#/components/parameters/proficiencyId' 
      responses:
        '200':
          description: "response while success to delete proficiency data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseDelete'
              examples:
                success: 
                  description: "Example success to delete proficiency data"
                  value: {
                    "Message": "Success to delete proficiency",
                    "Status": "Success",
                    "Data": "deleted",
                  }
                failed:
                  description: "Example failed to delete proficiency"
                  value: {
                    "Message": "Proficiency id not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to delete proficiency data"           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to delete proficiency data"
                  value: {
                    "Message": "Failed to delete proficiency",
                    "Status": "Failed",
                  }
                unauthorized:
                  description: "Example unauthorized access"
                  value: {
                    "Message": "Unauthorized access",
                    "Status": "Failed",
                  }
                invalid proficiencyId:
                  description: "Example Invalid proficiency id"
                  value: {
                    "Message": "Invalid proficiency id",
                    "Status": "Failed",
                  }


### certificate
  /certificate/{completionId}:
    get:
      tags:
        - "Certificate"
      summary: "Get certificate of volunteer completion."
      security:
        - JWTAuth: []
      description: "Get certificate of completion from volunteer activity"
      parameters: 
        - $ref: '#/components/parameters/completionId'
      responses:
        '200' : 
          description: "success to get certificate"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGetCertificate'
              examples:
                success: 
                  description: "Example success to get certificate"
                  value: {
                    "Message": "Success to get certificate",
                    "Status": "Success",
                    "Data": 
                          {
                            "certificate_number": "002/BERBAGI/VOLUNTEER/001/003",
                            "volunteer_name": "lukman hakim",
                            "proficiency_name": "education",
                            "recipient_name": "yayasan maju terus",
                            "start_date": "2021-10-12 07:00:00.000",
                            "finish_date": "2021-10-25 07:00:00.000",
                          },
                  }
                not found certificate:
                  description: "Example certificate not found"
                  value: {
                    "Message": "completion id not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to get certificate "           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to get certificate"
                  value: {
                    "Message": "Failed to get certificate",
                    "Status": "Failed",
                  }
                unauthorized:
                  description: "Example unauthorized access"
                  value: {
                    "Message": "Unauthorized access",
                    "Status": "Failed",
                  } 
                invalid completionId:
                  description: "Example invalid completion id"
                  value: {
                    "Message": "Invalid completion id",
                    "Status": "Failed",
                  }                   

### volunteer
  /volunteers:
    get:
      tags:
        - "Volunteer"
      summary: "Get list of volunteers"
      security:
        - JWTAuth: []
      description: "Get all available volunteer"
      responses:
        '200':
          description: "response while success to get list of volunteers "
          content:
            application/json:
              schema:
                type: object
                properties: {
                  "Message": {
                    type: string
                  },
                  "Status": {
                    type: string
                  },
                  "Data": {
                    type: array,
                    items: {
                      type: object,
                       properties: {
                         "id": {
                           type: number
                         },
                         "name": {
                           type: string
                         },
                         "email": {
                           type: string
                         },
                       }
                         
                    }
                  }
                }
              examples:
                success: 
                  description: "Example success get list of volunteers"
                  value: {
                    "Message": "Success to get list volunteers",
                    "Status": "Success",
                    "Data": [ 
                      {
                      "id": 1,
                      "name": "lukman hakim",
                      "email": "lukman@gmail.com"
                      },
                      {
                      "id": 2,
                      "name": "ahmad",
                      "email": "ahmad@gmail.com"
                      },
                    ]
                  }
                failed:
                  description: "Example list volunteers not found"
                  value: {
                    "Message": "Volunteers not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to get list volunteers "           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to get list volunteers"
                  value: {
                    "Message": "Failed to get list volunteers",
                    "Status": "Failed",
                  }
                unauthorized:
                  description: "Example unauthorized access"
                  value: {
                    "Message": "Unauthorized access",
                    "Status": "Failed",
                  }             

  /volunteers/profile:
    get:
      tags:
        - "Volunteer"
      summary: "Get volunteer profile"
      security:
        - JWTAuth: []
      description: "Get available volunteer profile"
      responses:
        '200':
          description: "response while success to to get volunteer profile "
          content:
            application/json:
              schema:
                type: object
                properties: {
                  "Message": {
                    type: string
                  },
                  "Status": {
                    type: string
                  },
                  "Data": {
                    type: object,
                    properties: {
                     "name": {
                        type: string
                      },
                      "email": {
                        type: string
                      },
                      "nik": {
                        type: string
                      },
                     "birth_date": {
                        type: string,
                        format: date-time,
                      },
                      "address_name": {
                        type: string
                      },
                      "city_name": {
                        type: string
                      },
                      "province_name": {
                        type: string
                      },
                      "proficiency_name": {
                        type: string
                      }
                    }
                  }
                }
              examples:
                success: 
                  description: "Example success get volunteer profile"
                  value: {
                    "Message": "Success to get volunteer profile",
                    "Status": "Success",
                    "Data": 
                      {
                        "name": "lukman hakim",
                        "email": "lukman@gmail.com",
                        "nik": "350716XXXXXXXX",
                        "birth_date": "1997-11-05",
                        "address_name": "flamboyan 3",
                        "city_name": "malang",
                        "province_name": "jawa timur",
                        "proficiency_name": "education",
                      },
                  }
                failed:
                  description: "Example volunteer data not found"
                  value: {
                    "Message": "Volunteer data not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to get volunteer profile "           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to get volunteer profile"
                  value: {
                    "Message": "Failed to get volunteer profile",
                    "Status": "Failed",
                  }
                unauthorized:
                  description: "Example unauthorized access"
                  value: {
                    "Message": "Unauthorized access",
                    "Status": "Failed",
                  }
                Invalid volunteerId:
                  description: "Invalid volunteer id"
                  value: {
                    "Message": "Invalid volunteer id",
                    "Status": "Failed",
                  }

### service
  /services:
    get:
      tags:
        - "Service"
      summary: "Get service on cart"
      security:
        - JWTAuth: []
      description: "Get available service on cart"
      responses:
        '200':
          description: "response while success to get service on cart "
          content:
            application/json:
              schema:
                type: object
                properties: {
                  "Message": {
                    type: string
                  },
                  "Status": {
                    type: string
                  },
                  "Data": {
                    type: object,
                    properties: {
                     "volunteer_name": {
                        type: string
                      },
                      "recipient_name": {
                        type: string
                      },
                      "recipient_address": {
                        type: string
                      },
                     "start_date": {
                        type: string,
                        format: date-time,
                      },
                      "finish_date": {
                        type: string,
                        format: date-time,
                      },
                    }
                  }
                }
              examples:
                success: 
                  description: "Example success get service on cart"
                  value: {
                    "Message": "Success to get service cart",
                    "Status": "Success",
                    "Data": 
                      {
                        "volunteer_name": "lukman hakim",
                        "recipient_name": "yayasan maju terus",
                        "address_name": "flamboyan 3",
                        "start_date": "2021-10-12 07:00:00.000",
                        "finish_date": "2021-10-25 07:00:00.000",

                      },
                  }
                failed:
                  description: "Example service cart not found"
                  value: {
                    "Message": "service cart not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to get service cart "           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to get service cart"
                  value: {
                    "Message": "Failed to get service cart",
                    "Status": "Failed",
                  }


    post:
      tags:
        - "Service"
      summary: "Add service to cart"
      security:
        - JWTAuth: []
      description: "Add available service to cart"
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/requestServiceCart'
            examples:
              service: 
                description: "Example for adding service to cart"
                value: {
                  "recipient_id" : 1,
                  "start_date": "2021-12-02",
                  "finish_date": "2021-12-30"
               }
      responses:
        '200':
          description: "response while success to add service to cart "
          content:
            application/json:
              schema:
                type: object
                properties: {
                  "Message": {
                    type: string
                  },
                  "Status": {
                    type: string
                  },
                  "Data": {
                    type: object,
                    properties: {
                     "volunteer_name": {
                        type: string
                      },
                      "recipient_name": {
                        type: string
                      },
                      "recipient_address": {
                        type: string
                      },
                     "start_date": {
                        type: string,
                        format: date-time,
                      },
                      "finish_date": {
                        type: string,
                        format: date-time,
                      },
                    }
                  }
                }
              examples:
                success: 
                  description: "Example success add service to cart"
                  value: {
                    "Message": "Success to add service to cart",
                    "Status": "Success",
                    "Data": 
                      {
                        "volunteer_name": "lukman hakim",
                        "recipient_name": "yayasan maju terus",
                        "address_name": "flamboyan 3",
                        "start_date": "2021-12-02 07:00:00.000",
                        "finish_date": "2021-12-30 07:00:00.000",

                      },
                  }
                failed:
                  description: "Example service cart not found"
                  value: {
                    "Message": "volunteer id not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to add service to cart "           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to add service to cart"
                  value: {
                    "Message": "Failed to add service to cart",
                    "Status": "Failed",
                  }
                invalid date:
                  description: "Example invalid service date"
                  value: {
                    "Message": "Find another date !",
                    "Status": "Failed",
                  }


    put:
      tags:
        - "Service"
      summary: "Update service on cart"
      security:
        - JWTAuth: []
      description: "Update available service on cart"
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/requestServiceCart'
            examples:
              service: 
                description: "Example for updating service on cart"
                value: {
                  "recipient_id" : 1,
                  "start_date": "2021-12-02",
                  "finish_date": "2021-12-30"
               }
      responses:
        '200':
          description: "response while success to update service on cart "
          content:
            application/json:
              schema:
                type: object
                properties: {
                  "Message": {
                    type: string
                  },
                  "Status": {
                    type: string
                  },
                  "Data": {
                    type: object,
                    properties: {
                     "volunteer_name": {
                        type: string
                      },
                      "recipient_name": {
                        type: string
                      },
                      "recipient_address": {
                        type: string
                      },
                     "start_date": {
                        type: string,
                        format: date-time,
                      },
                      "finish_date": {
                        type: string,
                        format: date-time,
                      },
                    }
                  }
                }
              examples:
                success: 
                  description: "Example success update service on cart"
                  value: {
                    "Message": "Success to update service on cart",
                    "Status": "Success",
                    "Data": 
                      {
                        "volunteer_name": "lukman hakim",
                        "recipient_name": "yayasan maju terus",
                        "address_name": "flamboyan 3",
                        "start_date": "2021-12-02 07:00:00.000",
                        "finish_date": "2021-12-30 07:00:00.000",

                      },
                  }
                failed:
                  description: "Example service cart not found"
                  value: {
                    "Message": "volunteer id not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to update service on cart "           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to update service on cart"
                  value: {
                    "Message": "Failed to update service on cart",
                    "Status": "Failed",
                  }
                invalid date:
                  description: "Example invalid service date"
                  value: {
                    "Message": "Find another date !",
                    "Status": "Failed",
                  }

    delete:            
      tags:
        - "Service"
      summary: "Delete service on cart"
      security:
        - JWTAuth: []
      description: "Delete service on cart"
      responses:
        '200':
          description: "response while success to delete service on cart"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseDelete'
              examples:
                success: 
                  description: "Example success to delete service on cart"
                  value: {
                    "Message": "Success to delete service ",
                    "Status": "Success",
                    "Data": "deleted",
                  }
                failed:
                  description: "Example failed to delete service on cart"
                  value: {
                    "Message": "Volunteer id not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to delete service on cart"           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to delete service on cart"
                  value: {
                    "Message": "Failed to delete service on cart",
                    "Status": "Failed",
                  }
                unauthorized:
                  description: "Example unauthorized access"
                  value: {
                    "Message": "Unauthorized access",
                    "Status": "Failed",
                  }

  /services/verification:
    post:
      tags:
        - "Service"
      summary: "Confirmation of service"
      security:
        - JWTAuth: []
      description: "Add confirmation of service"
      responses:
        '200':
          description: "response while success to confirm service on cart "
          content:
            application/json:
              schema:
                type: object
                properties: {
                  "Message": {
                    type: string
                  },
                  "Status": {
                    type: string
                  },
                  "Data": {
                    type: object,
                    properties: {
                      "invoice" : {
                        type: string
                      },
                     "volunteer_name": {
                        type: string
                      },
                      "volunteer_address": {
                        type: string
                      },
                      "proficiency_name": {
                        type: string
                      },
                      "recipient_name": {
                        type: string
                      },
                      "recipient_address": {
                        type: string
                      },
                     "start_date": {
                        type: string,
                        format: date-time,
                      },
                      "finish_date": {
                        type: string,
                        format: date-time,
                      },
                    }
                  }
                }
              examples:
                success: 
                  description: "Example success confirm service on cart"
                  value: {
                    "Message": "Success to confirm service on cart",
                    "Status": "Success",
                    "Data": 
                      {
                        "invoice": "002/BERBAGI/VOLUNTEER/001/003",
                        "volunteer_name": "lukman hakim",
                        "volunteer_address": "cempaka 5",
                        "proficiency_name": "education",
                        "recipient_name": "yayasan maju terus",
                        "recipient_address": "flamboyan 3",
                        "start_date": "2021-12-02 07:00:00.000",
                        "finish_date": "2021-12-30 07:00:00.000",

                      },
                  }
                failed:
                  description: "Example service cart not found"
                  value: {
                    "Message": "volunteer id not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to confim service activity data"           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to confim service activity data"
                  value: {
                    "Message": "Failed to confim service activity data",
                    "Status": "Failed",
                  }

  /services/verification/{verificationId}:
    get:
      tags:
        - "Service"
      summary: "Confirmation of service"
      security:
        - JWTAuth: []
      description: "Get available service confirmation"
      parameters:
        - $ref: '#/components/parameters/verificationId'
      responses:
        '200':
          description: "response while success to get confirmation of service "
          content:
            application/json:
              schema:
                type: object
                properties: {
                  "Message": {
                    type: string
                  },
                  "Status": {
                    type: string
                  },
                  "Data": {
                    type: object,
                    properties: {
                      "invoice" : {
                        type: string
                      },
                     "volunteer_name": {
                        type: string
                      },
                      "volunteer_address": {
                        type: string
                      },
                      "proficiency_name": {
                        type: string
                      },
                      "recipient_name": {
                        type: string
                      },
                      "recipient_address": {
                        type: string
                      },
                     "start_date": {
                        type: string,
                        format: date-time,
                      },
                      "finish_date": {
                        type: string,
                        format: date-time,
                      },
                    }
                  }
                }
              examples:
                success: 
                  description: "Example success to get confirmation service "
                  value: {
                    "Message": "Success to get confirmation service data",
                    "Status": "Success",
                    "Data": 
                      {
                        "invoice": "002/BERBAGI/VOLUNTEER/001/003",
                        "volunteer_name": "lukman hakim",
                        "volunteer_address": "cempaka 5",
                        "proficiency_name": "education",
                        "recipient_name": "yayasan maju terus",
                        "recipient_address": "flamboyan 3",
                        "start_date": "2021-12-02 07:00:00.000",
                        "finish_date": "2021-12-30 07:00:00.000",

                      },
                  }
                failed:
                  description: "Example verification id cart not found"
                  value: {
                    "Message": "Verification id not found",
                    "Status": "Success",
                  }
        '400':
          description: "response while failed to get confirmation service"           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to get confirmation service"
                  value: {
                    "Message": "Failed to get confirmation service data",
                    "Status": "Failed",
                  }

### completion
  /completion/{verificationId}:
    get:
      tags:
        - "Completion"
      summary: "Get completion of volunteer activity."
      security:
        - JWTAuth: []
      parameters: 
        - $ref: '#/components/parameters/verificationId'
      responses:
        '200' : 
          description: "Success to get completion data"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseCompletion'
              examples:
                success: 
                  description: "Example success to get completion data"
                  value: {
                    "Message": "Success to get completion data",
                    "Status": "Success",
                    "Data": 
                          {
                            "invoice": "002/BERBAGI/VOLUNTEER/001/003",
                            "volunteer_name": "lukman hakim",
                            "volunteer_address": "cempaka 5",
                            "proficiency_name": "education",
                            "recipient_name": "yayasan maju terus",
                            "recipient_address": "flamboyan 3",
                            "start_date": "2021-10-12 07:00:00.000",
                            "finish_date": "2021-10-25 07:00:00.000",
                            "completion_status": "not verified",
                          },
                  }
                not found certificate:
                  description: "Example completion not found"
                  value: {
                    "Message": "verification id not found",
                    "Status": "Success",
                  }

        '400':
          description: "response while failed to get completion data "           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to get completion data"
                  value: {
                    "Message": "Failed to get completion data",
                    "Status": "Failed",
                  }
                unauthorized:
                  description: "Example unauthorized access"
                  value: {
                    "Message": "Unauthorized access",
                    "Status": "Failed",
                  } 
                invalid completionId:
                  description: "Example invalid verification id"
                  value: {
                    "Message": "Invalid verification id",
                    "Status": "Failed",
                  }   

    put:
      tags:
        - "Completion"
      summary: "Update completion status of volunteer activity."
      security:
        - JWTAuth: []
      parameters: 
        - $ref: '#/components/parameters/verificationId'
        - $ref: '#/components/parameters/statusCompletion'
      responses:
        '200' : 
          description: "Success to update completion status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseCompletion'
              examples:
                success: 
                  description: "Example success to update completion status"
                  value: {
                    "Message": "Success to update completion status",
                    "Status": "Success",
                    "Data": 
                          {
                            "invoice": "002/BERBAGI/VOLUNTEER/001/003",
                            "volunteer_name": "lukman hakim",
                            "volunteer_address": "cempaka 5",
                            "proficiency_name": "education",
                            "recipient_name": "yayasan maju terus",
                            "recipient_address": "flamboyan 3",
                            "start_date": "2021-10-12 07:00:00.000",
                            "finish_date": "2021-10-25 07:00:00.000",
                            "completion_status": "verified",
                          },
                  }
                not found:
                  description: "Example completion not found"
                  value: {
                    "Message": "verification id not found",
                    "Status": "Success",
                  }

        '400':
          description: "response while failed to update completion status "           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to update completion status"
                  value: {
                    "Message": "Failed to update completion status",
                    "Status": "Failed",
                  }
                unauthorized:
                  description: "Example unauthorized access"
                  value: {
                    "Message": "Unauthorized access",
                    "Status": "Failed",
                  } 
                invalid completionId:
                  description: "Example invalid verification id"
                  value: {
                    "Message": "Invalid verification id",
                    "Status": "Failed",
                  } 

### productcarts
  /product-carts:
    get:
      tags:
        - "Product Carts"
      summary: "Get array of product packages in Donor's product carts"
      security:
        - JWTAuth: []
      description: "Get array of product packages in Donor's product carts"
      responses:
        '200':
          description: "response while success to get product packages array"
          content:
            application/json:
              schema:
                type: object
                properties: {
                  "message": {
                    type: string
                  },
                  "status": {
                    type: string
                  },
                  "data": {
                    type: object,
                       properties: {
                         "recipients": {
                            type: object,
                            properties: {
                              "recipient_id": {
                                type: number
                              }, 
                              "gifts":{
                                type: array,
                                items: {
                                  type: object,
                                  properties: {
                                    "product_package_id": {
                                      type: number
                                     },
                                    "quantity": {
                                      type: number
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "package_list": {
                            type: object,
                            properties: {
                              "product_package_id": {
                                type: number
                              }, 
                              "details":{
                                type: array,
                                items: {
                                  type: object,
                                  properties: {
                                    "product_id": {
                                      type: number
                                     },
                                    "quantity": {
                                      type: number
                                    }, 
                                    "price": {
                                      type: number
                                    }
                                  }
                                }
                              }
                            }
                          }, 
                          "payment_methods": {
                            type: array,
                            items: {
                              type: object,
                              properties: {
                                "id": {
                                  type: number
                                }, 
                                "name": {
                                  type: string
                                }
                              }
                            }
                        }
                    }
                }
              }
              examples:
                success: 
                  description: "Example success get product packages array"
                  value: {
                    "message": "cart is retrieved succesfully!",
                    "status": "Success",
                    "data": [ 
                      {
                      "recipient_id": 2,
                      "product_package_id": 3,
                      "quantity": 5
                      },
                      {
                      "recipient_id": 2,
                      "product_package_id": 1,
                      "quantity": 3
                      },
                      {
                      "recipient_id": 1,
                      "product_package_id": 1,
                      "quantity": 7
                      },
                    ]
                  }
                
        '400':
          description: "response while failed to get product packages array"           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to get list proficiencies"
                  value: {
                    "status": "failed",
                    "message": "no product_package_id found in user's product_carts",
                  }
                      

    put:
      tags:
        - "Checkout"
      summary: "Confirm checkout by specifying payment a method"
      security:
        - JWTAuth: []
      description: "Confirm checkout by specifying payment a method"
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/putRequestProductCarts'
            examples:
              recipient: 
                description: "Example for recipient with id number 1"
                value: {
                  "recipient_id" : 1,
                  "product_package_id": 1,
                  "quantity": 3
               }
              productPackage: 
                description: "Example for product package id number 1"
                value: {
                  "recipient_id" : 1,
                  "product_package_id": 1,
                  "quantity": 7
                }                    
      responses:
        '200':
          description: "response while success to create update donor's product carts "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUpdateProductCarts'
              examples:
                success: 
                  description: "Example success update donor's product carts"
                  value: {
                    "status": "success",
                    "message": "product cart is updated!",
                    "data": null
                  }
                
        '400':
          description: "response while failed to update donor's product carts"           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to update donor's product carts"
                  value: {
                    "status": "failed",
                    "message": "no product_package_id with id: 1298 found in the product_package table",
                  }

### checkout
  /checkout:
    get:
      tags:
        - "Checkout"
      summary: "Get array of product packages in Donor's product carts and array of payment options"
      security:
        - JWTAuth: []
      description: "Get array of product packages in Donor's product carts and array of payment options"
      responses:
        '200':
          description: "response while success to get product packages array and payment options array"
          content:
            application/json:
              schema:
                type: object
                properties: {
                  "message": {
                    type: string
                  },
                  "status": {
                    type: string
                  },
                  "data": {
                    type: array,
                    items: {
                      type: object,
                       properties: {
                         "recipient_id": {
                           type: number
                         },
                         "product_package_id": {
                           type: number
                         },
                         "quantity": {
                          type: number
                         }
                       }
                         
                    }
                  }
                }
              examples:
                success: 
                  description: "Example success get product packages array"
                  value: {
                    "message": "cart is retrieved succesfully!",
                    "status": "Success",
                    "data": [ 
                      {
                      "recipient_id": 2,
                      "product_package_id": 3,
                      "quantity": 5
                      },
                      {
                      "recipient_id": 2,
                      "product_package_id": 1,
                      "quantity": 3
                      },
                      {
                      "recipient_id": 1,
                      "product_package_id": 1,
                      "quantity": 7
                      },
                    ]
                  }
                
        '400':
          description: "response while failed to get product packages array"           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to get list proficiencies"
                  value: {
                    "status": "failed",
                    "message": "no product_package_id found in user's product_carts",
                  }
                      

    put:
      tags:
        - "Product Carts"
      summary: "Update quantity of product package to be received by the recipients"
      security:
        - JWTAuth: []
      description: "Update quantity of product package to be received by the recipients"
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/putRequestProductCarts'
            examples:
              recipient: 
                description: "Example for recipient with id number 1"
                value: {
                  "recipient_id" : 1,
                  "product_package_id": 1,
                  "quantity": 3
               }
              productPackage: 
                description: "Example for product package id number 1"
                value: {
                  "recipient_id" : 1,
                  "product_package_id": 1,
                  "quantity": 7
                }                    
      responses:
        '200':
          description: "response while success to create update donor's product carts "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUpdateProductCarts'
              examples:
                success: 
                  description: "Example success update donor's product carts"
                  value: {
                    "status": "success",
                    "message": "product cart is updated!",
                    "data": null
                  }
                
        '400':
          description: "response while failed to update donor's product carts"           
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed to update donor's product carts"
                  value: {
                    "status": "failed",
                    "message": "no product_package_id with id: 1298 found in the product_package table",
                  }

## requests
  /request/gift:
    post:
      tags:
        - "Requests"
      summary: "Request gift by children"
      security:
        - JWTAuth: []
      description: "Request gift by children users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGift'
            examples:
              gift:
                description: "Example for posting gift request"
                value: {
                  "address_id": 1,
                  "package_id": 1,
                  "quantity": 2
                }
      responses:
        '200':
          description: "response when success posting request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestGiftResponse'
              examples:
                success:
                  description: "Example success posting request"
                  value: {
                    "status": "success",
                    "message": "request has been submitted",
                    "data": {
                        "request_id": 2,
                        "user_id": 1,
                        "package": "School Package-SD_Telkomsel",
                        "quantity": 2
                      }
                  }
        '400':
          description: "response when failed posting request"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed posting request"
                  value: {
                    "status": "failed",
                    "message": "can't create new request"
                  }
  
  /request/donation:
    post:
      tags:
        - "Requests"
      summary: "Request donation by foundation"
      security:
        - JWTAuth: []
      description: "Request donation by foundation users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestDonation'
            examples:
              gift:
                description: "Example for posting donation request"
                value: {
                  "address_id": 1,
                  "amount": 100000,
                  "purpose": "renovation"
                }
      responses:
        '200':
          description: "response when success posting request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestDonationResponse'
              examples:
                success:
                  description: "Example success posting request"
                  value: {
                    "status": "success",
                    "message": "request has been submitted",
                    "data": {
                        "request_id": 2,
                        "user_id": 1,
                        "amount": 100000,
                        "purpose": "renovation"
                      }
                    }
        '400':
          description: "response when failed posting request"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed posting request"
                  value: {
                    "status": "failed",
                    "message": "can't create new request",
                    }
  
  /request/service:
    post:
      tags:
        - "Requests"
      summary: "Request service by foundation"
      security:
        - JWTAuth: []
      description: "Request service by foundation users"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestService'
            examples:
              service:
                description: "Example for posting service request"
                value: {
                  "address_id": 1,
                  "service_id": 1,
                  "start_date": "2021-10-17",
                  "finish_date": "2021-10-19"
                }
      responses:
        '200':
          description: "response when success posting request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestServiceResponse'
              examples:
                success:
                  description: "Example success posting request"
                  value: {
                    "status": "success",
                    "message": "request has been submitted",
                    "data": {
                        "request_id": 3,
                        "user_id": 1,
                        "service_id": 1,
                        "start_date": "2021-10-17",
                        "finish_date": "2021-10-19"
                      }
                    }
        '400':
          description: "response when failed posting request"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed posting request"
                  value: {
                    "status": "failed",
                    "message": "can't create new request",
                  }
  
  /request:
    get:
      tags:
        - "Requests"
      summary: "Get requests list"
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/resolvedRequest'
      description: "Get requests list"
      responses:
        '200':
          description: "response when success getting requests list"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGetRequestList'
              examples:
                success:
                  description: "Example success getting all requests list (no resolve specific status)"
                  value: {
                    "status": "success",
                    "message": "success getting request list",
                    "data": [
                        {
                          "ID": 2,
                          "user_id": 1,
                          "address_id": 1,
                          "type": "gift",
                          "resolved": "true"
                        },
                        {
                          "ID": 3,
                          "user_id": 1,
                          "address_id": 1,
                          "type": "gift",
                          "resolved": "false"
                        }
                      ]
                    }
        '400':
          description: "response when failed getting requests list"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed getting requests list"
                  value: {
                    "status": "failed",
                    "message": "can't get request list",
                  }

    delete:
      tags:
        - "Requests"
      summary: "Delete request"
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/request_id'
      description: "Delete request"
      responses:
        '400':
          description: "response when failed deleting request"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed deleting request"
                  value: {
                    "status": "failed",
                    "message": "can't delete request",
                  }

  /request/{type}:
    get:
      tags:
        - "Requests"
      summary: "Get type specific requests list"
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/requestType'
        - $ref: '#/components/parameters/resolvedRequest'
      description: "Get requests list"
      responses:
        '200':
          description: "response when success getting requests list"
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/responseGetRequestList'
              examples:
                success:
                  description: "Example success getting all requests list (no resolve specific status)"
                  value: {
                    "status": "success",
                    "message": "success getting request list",
                    "data": [
                        {
                          "ID": 2,
                          "user_id": 1,
                          "address_id": 1,
                          "type": "gift",
                          "resolved": "true"
                        },
                        {
                          "ID": 3,
                          "user_id": 1,
                          "address_id": 1,
                          "type": "gift",
                          "resolved": "false"
                        }
                      ]
                    }
        '400':
          description: "response when failed getting requests list"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed getting requests list"
                  value: {
                    "status": "failed",
                    "message": "can't get request list",
                  }

  /request/{recipient_id}:
    get:
      tags:
        - "Requests"
      summary: "Get requests list for specific userID"
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/recipient_id'
        - $ref: '#/components/parameters/requestType'
        - $ref: '#/components/parameters/resolvedRequest'
      description: "Get requests list for specific userID"
      responses:
        '200':
          description: "response when success getting requests list"
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/responseGetRequestList'
              examples:
                success:
                  description: "Example success getting all requests list (no resolve specific status)"
                  value: {
                    "status": "success",
                    "message": "success getting request list",
                    "data": [
                        {
                          "ID": 2,
                          "user_id": 1,
                          "address_id": 1,
                          "type": "gift",
                          "resolved": "true"
                        },
                        {
                          "ID": 3,
                          "user_id": 1,
                          "address_id": 1,
                          "type": "gift",
                          "resolved": "false"
                        }
                      ]
                    }
        '400':
          description: "response when failed getting requests list"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed getting requests list"
                  value: {
                    "status": "failed",
                    "message": "can't get request list",
                  }

## donations
  /donation:
    get:
      tags:
        - "Donations"
      summary: "Get donations list"
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/resolvedDonation'
      description: "Get donations list"
      responses:
        '200':
          description: "response when success getting donations list"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGetDonationList'
              examples:
                success:
                  description: "Example success getting all donations list (no resolve specific status)"
                  value: {
                    "status": "success",
                    "message": "success getting donation list",
                    "data": [
                        {
                          "donation_id": 2,
                          "donor_id": 1,
                          "recipient_id": 2,
                          "request_id": 1,
                          "amount": 100000,
                          "payment_status": "true"
                        },
                        {
                          "donation_id": 3,
                          "donor_id": 1,
                          "recipient_id": 3,
                          "request_id": 0,
                          "amount": 200000,
                          "payment_status": "false"
                        },
                      ]
                    }
        '400':
          description: "response when failed getting donations list"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed getting donations list"
                  value: {
                    "status": "failed",
                    "message": "failed to get donations list",
                  }

    post:
      tags:
        - "Donations"
      summary: "Make donations"
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/quick_donation'
      description: "Make donation <br /> <br />
                    If `quick` query parameter set to yes/true will
                    process donation to checkout immediately <br />
                    Add `payment_method_id` in request body
                    for quick donation<br /> <br />
                    `request_id = 0` for un-requested donation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/makeDonation'
            examples:
              regular donation:
                description: "Example for making regular donation"
                value: {
                  "recipient_id": 2,
                  "request_id": 1,
                  "amount": 100000
                }
              quick donation:
                description: "Example for making quick donation"
                value: {
                  "recipient_id": 2,
                  "request_id": 1,
                  "amount": 100000,
                  "payment_id": 1
                }
      responses:
        '200':
          description: "response when success adding donation to cart"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestDonationResponse'
              examples:
                success:
                  description: "Example success adding donation to cart"
                  value: {
                    "status": "success",
                    "message": "success add donation to cart",
                    "data": {
                        "donation_id": 0,
                        "donor_id": 1,
                        "recipient_id": 2,
                        "request_id": 2,
                        "amount": 100000,
                      }
                    }
        '400':
          description: "response when failed deleting donation"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed making donation"
                  value: {
                    "status": "failed",
                    "message": "failed to make donation",
                  }

  /cart/donation:
    get:
      tags:
        - "Donations"
      summary: "Get donations in cart"
      security:
        - JWTAuth: []
      description: "Get donation list in cart"
      responses:
        '200':
          description: "response when success getting donations list in cart"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGetDonationList'
              examples:
                success:
                  description: "Example success getting donations list in cart"
                  value: {
                    "status": "success",
                    "message": "success get donations in cart",
                    "data": [
                        {
                          "donation_id": 0,
                          "donor_id": 1,
                          "recipient_id": 2,
                          "request_id": 1,
                          "amount": 100000,
                          "payment_status": "false",
                          "made_at": "2021-10-13 12:17:25"
                        },
                        {
                          "donation_id": 0,
                          "donor_id": 1,
                          "recipient_id": 3,
                          "request_id": 0,
                          "amount": 100000,
                          "payment_status": "false",
                          "made_at": "2021-10-13 12:17:25"
                        }
                      ]
                    }
        '400':
          description: "response when failed getting donations list in cart"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed getting donations list"
                  value: {
                    "status": "failed",
                    "message": "failed to get cart",
                  }
    
    put:
      tags:
        - "Donations"
      summary: "Update donations cart"
      security:
        - JWTAuth: []
      description: "Update donation cart <br />
                    Only update non-requested donations <br />
                    Requested donation amount bound to request amount"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/makeDonation'
            examples:
              update donation:
                description: "Example for updating donation cart"
                value: {
                  "recipient_id": 2,
                  "request_id": 0,
                  "amount": 100000
                }
      responses:
        '200':
          description: "response when success updating donation in cart"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseMakeDonation'
              examples:
                success:
                  description: "Example success updating donation in cart"
                  value: {
                    "status": "success",
                    "message": "success update donation in cart",
                    "data":
                        {
                          "donation_id": 0,
                          "donor_id": 1,
                          "recipient_id": 2,
                          "request_id": 0,
                          "amount": 100000,
                          "payment_status": "false",
                          "made_at": "2021-10-13 12:15:30"
                        }
                    }
        '400':
          description: "response when failed updating donation in cart"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed to find item in cart:
                  description: "Example failed to find donation in cart"
                  value: {
                    "status": "failed",
                    "message": "failed to find item in cart",
                  }
                update requested donation:
                  description: "Example failed trying to update requested donation"
                  value: {
                    "status": "failed",
                    "message": "only non-requested donation can be updated",
                  }
                failed:
                  description: "Example failed to update donation in cart"
                  value: {
                    "status": "failed",
                    "message": "failed to update cart",
                  }

    delete:
      tags:
        - "Donations"
      summary: "Delete donations in cart"
      security:
        - JWTAuth: []
      description: "Delete donation in cart"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteDonation'
            examples:
              update donation:
                description: "Example for deleting donation cart"
                value: {
                  "recipient_id": 2,
                  "request_id": 0,
                }
      responses:
        '200':
          description: "response when success deleting donation from cart"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/successResponse'
              examples:
                success:
                  description: "Example success deleting donation from cart"
                  value: {
                    "Status": "success",
                    "Message": "success delete donation from cart",
                  }
        '400':
          description: "response when failed deleting donation from cart"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed to find item in cart:
                  description: "Example failed to find donation in cart"
                  value: {
                    "status": "failed",
                    "message": "failed to find item in cart",
                  }
                failed:
                  description: "Example failed deleting donation from cart"
                  value: {
                    "status": "failed",
                    "message": "failed to delete donation from cart",
                  }

  /donation/checkout:
    post:
      tags:
        - "Donations"
      summary: "Checkout donations"
      security:
        - JWTAuth: []
      description: "Checkout donation <br />
                    Only checkout one donation at a time"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/checkoutDonation'
            examples:
              checkout donation:
                description: "Example checkout donation"
                value: {
                  "recipient_id": 2,
                  "request_id": 1,
                  "payment_id": 1
                }
      responses:
        '200':
          description: "response when success checkout donation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestGiftResponse'
              examples:
                success:
                  description: "Example of checkout donation"
                  value:  {
                    "status": "success",
                    "message": "success checkout donation, proceed to payment",
                    "data": [
                        {
                          "recipient_id": 2,
                          "request_id": 1,
                          "amount": 100000
                        }
                      ]
                    }
        '400':
          description: "response when failed checkout donation"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed checkout donation"
                  value: {
                    "status": "failed",
                    "message": "failed to checkout donation"
                  }
  
  /payment/donation:
    post:
      tags:
        - "Donations"
      summary: "Pay donations"
      security:
        - JWTAuth: []
      description: "Pay donation"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payDonation'
            examples:
              pay donation:
                description: "Example pay donation"
                value: {
                  "invoice_id": "BERBAGI.DONOR.001.DONATE.001.2021-10-13 16:06:53",
                  "total": 100000,
                  "payment_method_id": 1
                }
      responses:
        '200':
          description: "response when success pay donation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payDonationResponse'
              examples:
                success:
                  description: "Example of pay donation"
                  value:  {
                    "status": "success",
                    "message": "payment success",
                    "data": [
                        {
                          "donor_id": 2,
                          "invoice_id": "BERBAGI.DONOR.001.DONATE.001.2021-10-13 16:06:53",
                          "total": 100000,
                          "payment_method_id": 1,
                          "created_at": "2021-10-13 16:08:45"
                        }
                      ]
                    }
        '400':
          description: "response when failed pay donation"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed:
                  description: "Example failed pay donation <br />
                                Error details will attached at the end of message"
                  value: {
                    "status": "failed",
                    "message": "failed to process payment; ..."
                  }
  
## locations
  /nearby/{resource}:
    get:
      tags:
        - "Nearby Locations"
      summary: "Get nearby recipients or requests list"
      security:
        - JWTAuth: []
      parameters:
        - $ref: '#/components/parameters/nearby_resource'
        - $ref: '#/components/parameters/nearby_type'
        - $ref: '#/components/parameters/nearby_range'
      description: "Get nearby recipients or requests list <br /><br />
                    `resource`: <br /><br />
                    - `recipients` -> `type`:<br />
                    --- `children` <br />
                    --- `foundation` <br /> <br />
                    - `requests` -> `type`:<br />
                    --- `gift` <br />
                    --- `donation` <br />
                    --- `service`"
      responses:
        '200':
          description: "response when success getting requests list"
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/nearbyUsersResponse'
                  # $ref: '#/components/schemas/nearbyRequestsResponse'
              examples:
                recipients:
                  description: "Example of getting nearby resipients"
                  value:  {
                    "status": "success",
                    "message": "success getting recipients nearby",
                    "data": [
                        {
                          "user_id": 2,
                          "name": jono,
                          "role": "children",
                          "Address": "Jl Pemuda",
                          "City": "Tasikmalaya",
                          "Province": "West Java",
                          "Latitude": -7.2318,
                          "Longitude": 110.3261,
                          "Distance": 3.4
                        }
                      ]
                    }

                requests:
                  description: "Example of getting nearby requests"
                  value:  {
                    "status": "success",
                    "message": "success getting requests nearby",
                    "data": [
                        {
                          "request_id": 2,
                          "name": jono,
                          "role": "children",
                          "type": "gift",
                          "Address": "Jl Pemuda",
                          "City": "Tasikmalaya",
                          "Province": "West Java",
                          "Distance": 3.4
                        }
                      ]
                    }
                
                no target nearby:
                  description: "Example of getting nearby requests"
                  value:  {
                    "status": "success",
                    "message": "no target nearby",
                    }

        '400':
          description: "response when failed getting nearby target list"
          content:
            application/json:     
              schema:
                $ref: '#/components/schemas/failedResponse'
              examples:
                failed get recipients:
                  description: "Example failed getting recipients list"
                  value: {
                    "status": "failed",
                    "message": "failed to get nearest recipients",
                  }
                failed get requests:
                  description: "Example failed getting requests list"
                  value: {
                    "status": "failed",
                    "message": "failed to get nearest requests",
                  }
                invalid resource:
                  description: "Example wrong resource type"
                  value: {
                    "status": "failed",
                    "message": "invalid resource type",
                  }
                invalid category:
                  description: "Example wrong category type"
                  value: {
                    "status": "failed",
                    "message": "invalid category",
                  }
                invalid combination:
                  description: "Example failed matching resource and type"
                  value: {
                    "status": "failed",
                    "message": "invalid resource and type combination",
                  }

#################
components:
#################
  schemas:
    requestProficiency: 
      type: object
      properties:
        "name":
          type: string
          minLength: 1

    requestCompletion: 
      type: object
      properties:
        "status":
          type: string

    requestServiceCart:
      type: object
      properties:
        "recipientId":
          type: number
        "start_date":
          type: string
          format: date
        "finish_date":
          type: string
          format: date

    login:
      type: object
      properties:
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1

    failedResponse:
      type: object
      properties: {
        "Message": {
          type: string
        },
        "Status": {
          type: string
        }
      }


    responseUpdateCreate:
      type: object
      properties: {
        "Message": {
          type: string
        },
        "Status": {
          type: string
        },
        "Data": {
          type: object,
          properties: {
            "id": {
              type: number
            },
            "name": {
              type: string
            }
          }
        }
      }

    responseGetCertificate:
      type: object
      properties: {
        "Message": {
          type: string
        },
        "Status": {
          type: string
        },
        "Data": {
          type: object,
          properties: {
            "certificate_number": {
              type: string
            },
            "volunteer_name": {
              type: string
            },
            "proficiency_number": {
              type: string
            },
            "recipient_name": {
              type: string
            },
            "start_date": {
              type: string,
              format: date-time
            },
            "finish_date": {
              type: string,
              format: date-time
            },
          }
        }
      }
    
    responseCompletion:
      type: object
      properties: {
        "Message": {
          type: string
        },
        "Status": {
          type: string
        },
        "Data": {
          type: object,
          properties: {
            "invoice": {
              type: string
            },
            "volunteer_name": {
              type: string
            },
            "volunteer_address": {
              type: string
            },
            "proficiency_name": {
              type: string
            },
            "recipient_name": {
              type: string
            },
            "recipient_address": {
              type: string
            },
            "start_date": {
              type: string,
              format: date-time
            },
            "finish_date": {
              type: string,
              format: date-time
            },
            "completion_status": {
              type: string
            },
          }
        }
      }

    responseDelete:
      type: object
      properties: {
        "Message": {
          type: string
        },
        "Status": {
          type: string
        },
        "Data": {
          type: string
          }
        }


    responseUpdateProductCarts:
      type: object
      properties: {
        "status": {
          type: string
        },
        "message": {
          type: string
        },
        "data": {
          type: string
          }
        }

    putRequestProductCarts:
      type: object
      properties:
        "recipient_id":
          type: number
        "product_package_id":
          type: number
        "quantity":
          type: number

    
    requestGift:
      type: object
      properties: {
        "address_id": {
          type: number
        },
        "package_id": {
          type: number
        },
        "quantity": {
          type: number
        },
      }

    requestGiftResponse:
      type: object
      properties: {
        "status": {
          type: string
        },
        "message": {
          type: string
        },
        "data": {
          type: object,
          properties: {
            "request_id": {
              type: number
            },
            "user_id": {
              type: number
            },
            "package": {
              type: string
            },
            "quantity": {
              type: number
            }
          }
        }
      }
        
    requestDonation:
      type: object
      properties: {
        "address_id": {
          type: number
        },
        "amount": {
          type: number
        },
        "purpose": {
          type: string
        },
      }

    requestDonationResponse:
      type: object
      properties: {
          "status": {
            type: string
          },
          "message": {
            type: string
          },
          "data": {
            type: object,
            properties: {
              "request_id": {
                type: number
              },
              "user_id": {
                type: number
              },
              "amount": {
                type: number
              },
              "purpose": {
                type: string
              },
            }
          }
      }
        
    requestService:
      type: object
      properties: {
        "address_id": {
          type: number
        },
        "service_id": {
          type: number
        },
        "start_date": {
          type: string
        },
        "finish_date": {
          type: string
        },
      }

    requestServiceResponse:
      type: object
      properties: {
          "status": {
            type: string
          },
          "message": {
            type: string
          },
          "data": {
            type: object,
            properties: {
              "request_id": {
                type: number
              },
              "user_id": {
                type: number
              },
              "amount": {
                type: number
              },
              "purpose": {
                type: string
              },
            }
          }
      }
        
    responseGetRequestList:
      type: object
      properties: {
          "message": {
            type: string
          },
          "status": {
            type: string
          },
          "data": {
            type: array,
            items: {
              type: object,
              properties:
                {
                  "id": {
                    type: number
                  },
                  "user_id": {
                    type: number
                  },
                  "address_id": {
                    type: number
                  },
                  "type": {
                    type: string
                  },
                  "resolved": {
                    type: string
                  },
                }
            }
          },
        }
    
    responseDeleteRequest:
      type: object
      properties: {
        "message": {
          type: string
        },
        "status": {
          type: string
        }
      }

    successResponse:
      type: object
      properties: {
        "message": {
          type: string
        },
        "status": {
          type: string
        }
      }

    makeDonation:
      type: object
      properties: {
        "recipient_id": {
          type: number
        },
        "request_id": {
          type: number
        },
        "amount": {
          type: number
        },
      }
   
    checkoutDonation:
      type: object
      properties: {
        "recipient_id": {
          type: number
        },
        "request_id": {
          type: number
        },
        "payment": {
          type: number
        },
      }
    
    payDonation:
      type: object
      properties: {
        "invoice_id": {
          type: string
        },
        "total": {
          type: number
        },
        "payment_method_id": {
          type: number
        },
      }

    payDonationResponse:
      type: object
      properties: {
        "Status": {
          type: string
        },
        "Message": {
          type: string
        },
        "Data": {
            type: array,
            items: {
              type: object,
              properties:
                {
                  "donor_id": {
                    type: number
                  },
                  "invoice_id": {
                    type: string
                  },
                  "total": {
                    type: number
                  },
                  "payment_method_id": {
                    type: number
                  },
                  "created_at": {
                    type: string
                  },
                }
            }
        }
      }

    responseMakeDonation:
      type: object
      properties: {
          "Status": {
            type: string
          },
          "Message": {
            type: string
          },
          "Data": {
            type: object,
            properties: {
              "donation_id": {
                type: number
              },
              "donor_id": {
                type: number
              },
              "recipient_id": {
                type: number
              },
              "request_id": {
                type: number
              },
              "amount": {
                type: number
              },
            }
          }
      }

    responseGetDonationList:
      type: object
      properties: {
          "message": {
            type: string
          },
          "status": {
            type: string
          },
          "data": {
            type: array,
            items: {
              type: object,
              properties:
                {
                  "donation_id": {
                    type: number
                  },
                  "donor_id": {
                    type: number
                  },
                  "recipient_id": {
                    type: number
                  },
                  "request_id": {
                    type: number
                  },
                  "amount": {
                    type: number
                  },
                  "payment_status": {
                    type: string
                  },
                  "made_at": {
                    type: string
                  },
                }
            }
          },
        }

    deleteDonation:
      type: object
      properties: {
        "recipient_id": {
          type: number
        },
        "request_id": {
          type: number
        },
      }

    nearbyUsersResponse:
      type: object
      properties: {
        "status": {
          type: string
        },
        "message": {
          type: string
        },
        "data": {
          type: object,
          properties: {
            "user_id": {
              type: number
            },
            "name": {
              type: string
            },
            "role": {
              type: string
            },
            "address": {
              type: string
            },
            "city": {
              type: string
            },
            "province": {
              type: string
            },
            "latitude": {
              type: number
            },
            "longitude": {
              type: number
            },
            "distance": {
              type: number
            },
          }
        }
      }
  
    nearbyRequestsResponse:
      type: object
      properties: {
        "status": {
          type: string
        },
        "message": {
          type: string
        },
        "data": {
          type: object,
          properties: {
            "request_id": {
              type: number
            },
            "name": {
              type: string
            },
            "role": {
              type: string
            },
            "type": {
              type: string
            },
            "address": {
              type: string
            },
            "city": {
              type: string
            },
            "province": {
              type: string
            },
            "distance": {
              type: number
            }
          }
        }
      }
  
  parameters:
    proficiencyId:
      name: "id"
      in: "path"
      required: true
      description: "proficiency id for update or delete proficiency data"
      schema:
        type: number
        example: 1
      style: simple
      examples:
        education: 
          description: "Sample proficiency id for education"
          value: 1
        health: 
          description: "Sample proficiency id for health"
          value: 2  

    completionId:
      name: "completionId"
      in: "path"
      required: true
      description: "completion id for get certificate of completion"
      schema:
        type: number
        example: 1
      style: simple

    verificationId:
      name: "verificationId"
      in: "path"
      required: true
      description: "verification id for get confirmation of service"
      schema:
        type: number
        example: 1
      style: simple

    statusCompletion:
      name: "status"
      in: "query"
      required: true
      description: updated status of volunteer completion
      schema:
        $ref: '#/components/schemas/requestCompletion'
      examples:
        verified: 
          description: "Example for verified status"
          value: {
            "status" : "verified"  
          }
        completed: 
          description: "Example for completed status"
          value: {
            "status" : "completed"  
          } 

    resolvedRequest:
      name: "resolved"
      in: "query"
      required: false
      description: resolved status specific requests
      schema:
        $ref: '#/components/schemas/responseGetRequestList'
      examples:
        yes:
          description: "Example of resolved request"
          value:  {
            "status": "success",
            "message": "success getting request list",
            "data": [
                {
                  "ID": 2,
                  "user_id": 1,
                  "address_id": 1,
                  "type": "gift",
                  "resolved": "true"
                }
              ]
            }
        no:
          description: "Example of unresolved request"
          value:  {
            "status": "success",
            "message": "success getting request list",
            "data": [
                {
                  "ID": 3,
                  "user_id": 1,
                  "address_id": 1,
                  "type": "gift",
                  "resolved": "false"
                }
              ]
            }

    requestType:
      name: "type"
      in: path
      required: true
      description: type specific request
      schema:
        $ref:
          '#/components/schemas/responseGetRequestList'
      examples:
        gift:
          description: "Example of gift request"
          value:  {
            "status": "success",
            "message": "success getting request list",
            "data": [
                {
                  "ID": 2,
                  "user_id": 1,
                  "address_id": 1,
                  "type": "gift",
                  "resolved": "true"
                }
              ]
            }
        donation:
          description: "Example of donation request"
          value:  {
            "status": "success",
            "message": "success getting request list",
            "data": [
                {
                  "ID": 2,
                  "user_id": 1,
                  "address_id": 1,
                  "type": "donation",
                  "resolved": "false"
                }
              ]
            }
        service:
          description: "Example of service request"
          value:  {
            "status": "success",
            "message": "success getting request list",
            "data": [
                {
                  "ID": 2,
                  "user_id": 1,
                  "address_id": 1,
                  "type": "service",
                  "resolved": "false"
                }
              ]
            }

    request_id:
      name: "request_id"
      in: query
      required: true
      description: delete specific request
      schema:
        $ref:
          '#/components/schemas/responseDeleteRequest'
      examples:
        1:
          description: "Example of delete request"
          value:  {
            "status": "success",
            "message": "success delete request",
          }

    recipient_id:
      name: "recipient_id"
      in: path
      required: true
      description: type specific request
      schema:
        $ref:
          '#/components/schemas/responseGetRequestList'
      examples:
        1:
          description: "Example of service request"
          value:  {
            "status": "success",
            "message": "success getting request list",
            "data": [
                {
                  "ID": 2,
                  "user_id": 1,
                  "address_id": 1,
                  "type": "gift",
                  "resolved": "false"
                }
              ]
            }

    resolvedDonation:
      name: "resolved"
      in: "query"
      required: false
      description: resolved status specific donation
      schema:
        $ref: '#/components/schemas/responseGetDonationList'
      examples:
        yes:
          description: "Example of resolved donation"
          value:  {
            "status": "success",
            "message": "success getting donations list",
            "data": [
                {
                  "donation_id": 2,
                  "donor_id": 1,
                  "recipient_id": 2,
                  "request_id": 1,
                  "amount": 100000,
                  "payment_status": "true"
                }
              ]
            }
        no:
          description: "Example of unresolved donation"
          value:  {
            "status": "success",
            "message": "success getting donations list",
            "data": [
                {
                  "donation_id": 3,
                  "donor_id": 1,
                  "recipient_id": 3,
                  "request_id": 0,
                  "amount": 200000,
                  "payment_status": "false"
                },
              ]
            }

    quick_donation:
      name: "quick"
      in: "query"
      required: false
      description: donation will be processed to checkout immediately
      schema:
        $ref: '#/components/schemas/makeDonation'
      examples:
        yes:
          description: "Example of quick donation"
          value:  {
            "status": "success",
            "message": "success checkout donation, proceed to payment",
            "data": [
                {
                  "recipient_id": 2,
                  "request_id": 1,
                  "amount": 100000
                }
              ]
            }
   
    nearby_range:
      name: "range"
      in: "query"
      required: true
      description: range to get nearby recipients or requests
      schema:
        $ref: '#/components/schemas/nearbyUsersResponse'
        # $ref: '#/components/schemas/nearbyRequestsResponse'
      examples:
        success:
          description: "Example of getting nearby resipients"
          value:  {
            "status": "success",
            "message": "success getting recipients nearby",
            "data": [
                {
                  "user_id": 2,
                  "name": jono,
                  "role": "children",
                  "Address": "Jl Pemuda",
                  "City": "Tasikmalaya",
                  "Province": "West Java",
                  "Latitude": -7.2318,
                  "Longitude": 110.3261,
                  "Distance": 3.4
                }
              ]
            }
        failed too far:
          description: "Example of quick donation"
          value:  {
            "status": "failed",
            "message": "range too far",
            }
        failed invalid range:
          description: "Example of quick donation"
          value:  {
            "status": "failed",
            "message": "range value invalid",
            }
  
    nearby_resource:
      name: "resource"
      in: "path"
      required: true
      description: range to get nearby recipients or requests
      schema:
        $ref: '#/components/schemas/nearbyUsersResponse'
        # $ref: '#/components/schemas/nearbyRequestsResponse'
      examples:
        recipient:
          description: "Example of getting nearby resipients"
          value:  {
            "status": "success",
            "message": "success getting recipients nearby",
            "data": [
                {
                  "user_id": 2,
                  "name": jono,
                  "role": "children",
                  "Address": "Jl Pemuda",
                  "City": "Tasikmalaya",
                  "Province": "West Java",
                  "Latitude": -7.2318,
                  "Longitude": 110.3261,
                  "Distance": 3.4
                }
              ]
            }
        request:
          description: "Example of getting nearby requests"
          value:  {
            "status": "success",
            "message": "success getting requests nearby",
            "data": [
                {
                  "request_id": 2,
                  "name": jono,
                  "role": "children",
                  "type": "gift",
                  "Address": "Jl Pemuda",
                  "City": "Tasikmalaya",
                  "Province": "West Java",
                  "Distance": 3.4
                }
              ]
            }
   
    nearby_type:
      name: "type"
      in: "query"
      required: false
      description: range to get nearby recipients or requests
      schema:
        $ref: '#/components/schemas/nearbyUsersResponse'
        # $ref: '#/components/schemas/nearbyRequestsResponse'
      examples:
        children:
          description: "Example of getting nearby children"
          value:  {
            "status": "success",
            "message": "success getting recipients nearby",
            "data": [
                {
                  "user_id": 2,
                  "name": jono,
                  "role": "children",
                  "Address": "Jl Pemuda",
                  "City": "Tasikmalaya",
                  "Province": "West Java",
                  "Latitude": -7.2318,
                  "Longitude": 110.3261,
                  "Distance": 3.4
                }
              ]
            }
        gift:
          description: "Example of getting nearby requests"
          value:  {
            "status": "success",
            "message": "success getting requests nearby",
            "data": [
                {
                  "request_id": 2,
                  "name": jono,
                  "role": "children",
                  "type": "gift",
                  "Address": "Jl Pemuda",
                  "City": "Tasikmalaya",
                  "Province": "West Java",
                  "Distance": 3.4
                }
              ]
            }

  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"

          
      